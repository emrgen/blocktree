// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: apis/v1/apis.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _apis_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Pointer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pointer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pointer with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PointerMultiError, or nil if none found.
func (m *Pointer) ValidateAll() error {
	return m.validate(true)
}

func (m *Pointer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetBlockId()); err != nil {
		err = PointerValidationError{
			field:  "BlockId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Position

	if len(errors) > 0 {
		return PointerMultiError(errors)
	}

	return nil
}

func (m *Pointer) _validateUuid(uuid string) error {
	if matched := _apis_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PointerMultiError is an error wrapping multiple validation errors returned
// by Pointer.ValidateAll() if the designated constraints aren't met.
type PointerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PointerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PointerMultiError) AllErrors() []error { return m }

// PointerValidationError is the validation error returned by Pointer.Validate
// if the designated constraints aren't met.
type PointerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PointerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PointerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PointerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PointerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PointerValidationError) ErrorName() string { return "PointerValidationError" }

// Error satisfies the builtin error interface
func (e PointerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPointer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PointerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PointerValidationError{}

// Validate checks the field values on OpProp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OpProp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpProp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OpPropMultiError, or nil if none found.
func (m *OpProp) ValidateAll() error {
	return m.validate(true)
}

func (m *OpProp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return OpPropMultiError(errors)
	}

	return nil
}

// OpPropMultiError is an error wrapping multiple validation errors returned by
// OpProp.ValidateAll() if the designated constraints aren't met.
type OpPropMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpPropMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpPropMultiError) AllErrors() []error { return m }

// OpPropValidationError is the validation error returned by OpProp.Validate if
// the designated constraints aren't met.
type OpPropValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpPropValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpPropValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpPropValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpPropValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpPropValidationError) ErrorName() string { return "OpPropValidationError" }

// Error satisfies the builtin error interface
func (e OpPropValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpProp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpPropValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpPropValidationError{}

// Validate checks the field values on Op with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Op) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Op with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OpMultiError, or nil if none found.
func (m *Op) ValidateAll() error {
	return m.validate(true)
}

func (m *Op) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Table

	// no validation rules for BlockId

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpValidationError{
					field:  "At",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpValidationError{
					field:  "At",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpValidationError{
				field:  "At",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.Object != nil {
		// no validation rules for Object
	}

	if m.Linked != nil {
		// no validation rules for Linked
	}

	if m.Props != nil {
		// no validation rules for Props
	}

	if m.Patch != nil {
		// no validation rules for Patch
	}

	if len(errors) > 0 {
		return OpMultiError(errors)
	}

	return nil
}

// OpMultiError is an error wrapping multiple validation errors returned by
// Op.ValidateAll() if the designated constraints aren't met.
type OpMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpMultiError) AllErrors() []error { return m }

// OpValidationError is the validation error returned by Op.Validate if the
// designated constraints aren't met.
type OpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpValidationError) ErrorName() string { return "OpValidationError" }

// Error satisfies the builtin error interface
func (e OpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransactionMultiError, or
// nil if none found.
func (m *Transaction) ValidateAll() error {
	return m.validate(true)
}

func (m *Transaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetTransactionId()); err != nil {
		err = TransactionValidationError{
			field:  "TransactionId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetSpaceId()); err != nil {
		err = TransactionValidationError{
			field:  "SpaceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = TransactionValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionValidationError{
						field:  fmt.Sprintf("Ops[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionValidationError{
						field:  fmt.Sprintf("Ops[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionValidationError{
					field:  fmt.Sprintf("Ops[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TransactionMultiError(errors)
	}

	return nil
}

func (m *Transaction) _validateUuid(uuid string) error {
	if matched := _apis_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// TransactionMultiError is an error wrapping multiple validation errors
// returned by Transaction.ValidateAll() if the designated constraints aren't met.
type TransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionMultiError) AllErrors() []error { return m }

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on TransactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionsRequestMultiError, or nil if none found.
func (m *TransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionsRequestValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionsRequestValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionsRequestValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TransactionsRequestMultiError(errors)
	}

	return nil
}

// TransactionsRequestMultiError is an error wrapping multiple validation
// errors returned by TransactionsRequest.ValidateAll() if the designated
// constraints aren't met.
type TransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionsRequestMultiError) AllErrors() []error { return m }

// TransactionsRequestValidationError is the validation error returned by
// TransactionsRequest.Validate if the designated constraints aren't met.
type TransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionsRequestValidationError) ErrorName() string {
	return "TransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionsRequestValidationError{}

// Validate checks the field values on ApplyTransactionResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyTransactionResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyTransactionResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyTransactionResultMultiError, or nil if none found.
func (m *ApplyTransactionResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyTransactionResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetTransactionId()); err != nil {
		err = ApplyTransactionResultValidationError{
			field:  "TransactionId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetSpaceId()); err != nil {
		err = ApplyTransactionResultValidationError{
			field:  "SpaceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return ApplyTransactionResultMultiError(errors)
	}

	return nil
}

func (m *ApplyTransactionResult) _validateUuid(uuid string) error {
	if matched := _apis_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ApplyTransactionResultMultiError is an error wrapping multiple validation
// errors returned by ApplyTransactionResult.ValidateAll() if the designated
// constraints aren't met.
type ApplyTransactionResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyTransactionResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyTransactionResultMultiError) AllErrors() []error { return m }

// ApplyTransactionResultValidationError is the validation error returned by
// ApplyTransactionResult.Validate if the designated constraints aren't met.
type ApplyTransactionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyTransactionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyTransactionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyTransactionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyTransactionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyTransactionResultValidationError) ErrorName() string {
	return "ApplyTransactionResultValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyTransactionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyTransactionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyTransactionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyTransactionResultValidationError{}

// Validate checks the field values on TransactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionsResponseMultiError, or nil if none found.
func (m *TransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionsResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionsResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionsResponseValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TransactionsResponseMultiError(errors)
	}

	return nil
}

// TransactionsResponseMultiError is an error wrapping multiple validation
// errors returned by TransactionsResponse.ValidateAll() if the designated
// constraints aren't met.
type TransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionsResponseMultiError) AllErrors() []error { return m }

// TransactionsResponseValidationError is the validation error returned by
// TransactionsResponse.Validate if the designated constraints aren't met.
type TransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionsResponseValidationError) ErrorName() string {
	return "TransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionsResponseValidationError{}

// Validate checks the field values on CreateSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSpaceRequestMultiError, or nil if none found.
func (m *CreateSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetSpaceId()); err != nil {
		err = CreateSpaceRequestValidationError{
			field:  "SpaceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateSpaceRequestMultiError(errors)
	}

	return nil
}

func (m *CreateSpaceRequest) _validateUuid(uuid string) error {
	if matched := _apis_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateSpaceRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSpaceRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSpaceRequestMultiError) AllErrors() []error { return m }

// CreateSpaceRequestValidationError is the validation error returned by
// CreateSpaceRequest.Validate if the designated constraints aren't met.
type CreateSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSpaceRequestValidationError) ErrorName() string {
	return "CreateSpaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSpaceRequestValidationError{}

// Validate checks the field values on CreateSpaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSpaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSpaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSpaceResponseMultiError, or nil if none found.
func (m *CreateSpaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSpaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetSpaceId()); err != nil {
		err = CreateSpaceResponseValidationError{
			field:  "SpaceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateSpaceResponseMultiError(errors)
	}

	return nil
}

func (m *CreateSpaceResponse) _validateUuid(uuid string) error {
	if matched := _apis_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateSpaceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSpaceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSpaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSpaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSpaceResponseMultiError) AllErrors() []error { return m }

// CreateSpaceResponseValidationError is the validation error returned by
// CreateSpaceResponse.Validate if the designated constraints aren't met.
type CreateSpaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSpaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSpaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSpaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSpaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSpaceResponseValidationError) ErrorName() string {
	return "CreateSpaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSpaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSpaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSpaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSpaceResponseValidationError{}

// Validate checks the field values on Block with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Block) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Block with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BlockMultiError, or nil if none found.
func (m *Block) ValidateAll() error {
	return m.validate(true)
}

func (m *Block) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetParentId()); err != nil {
		err = BlockValidationError{
			field:  "ParentId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetBlockId()); err != nil {
		err = BlockValidationError{
			field:  "BlockId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Object

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BlockValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BlockValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BlockValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetLinked() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BlockValidationError{
						field:  fmt.Sprintf("Linked[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BlockValidationError{
						field:  fmt.Sprintf("Linked[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BlockValidationError{
					field:  fmt.Sprintf("Linked[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Json != nil {
		// no validation rules for Json
	}

	if m.Props != nil {
		// no validation rules for Props
	}

	if m.Deleted != nil {
		// no validation rules for Deleted
	}

	if m.Erased != nil {
		// no validation rules for Erased
	}

	if len(errors) > 0 {
		return BlockMultiError(errors)
	}

	return nil
}

func (m *Block) _validateUuid(uuid string) error {
	if matched := _apis_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// BlockMultiError is an error wrapping multiple validation errors returned by
// Block.ValidateAll() if the designated constraints aren't met.
type BlockMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockMultiError) AllErrors() []error { return m }

// BlockValidationError is the validation error returned by Block.Validate if
// the designated constraints aren't met.
type BlockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockValidationError) ErrorName() string { return "BlockValidationError" }

// Error satisfies the builtin error interface
func (e BlockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockValidationError{}

// Validate checks the field values on GetBlockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBlockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlockRequestMultiError, or nil if none found.
func (m *GetBlockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetBlockId()); err != nil {
		err = GetBlockRequestValidationError{
			field:  "BlockId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SpaceId != nil {

		if err := m._validateUuid(m.GetSpaceId()); err != nil {
			err = GetBlockRequestValidationError{
				field:  "SpaceId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetBlockRequestMultiError(errors)
	}

	return nil
}

func (m *GetBlockRequest) _validateUuid(uuid string) error {
	if matched := _apis_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetBlockRequestMultiError is an error wrapping multiple validation errors
// returned by GetBlockRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBlockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlockRequestMultiError) AllErrors() []error { return m }

// GetBlockRequestValidationError is the validation error returned by
// GetBlockRequest.Validate if the designated constraints aren't met.
type GetBlockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockRequestValidationError) ErrorName() string { return "GetBlockRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBlockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockRequestValidationError{}

// Validate checks the field values on GetBlockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBlockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlockResponseMultiError, or nil if none found.
func (m *GetBlockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBlock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBlockResponseValidationError{
					field:  "Block",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBlockResponseValidationError{
					field:  "Block",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBlockResponseValidationError{
				field:  "Block",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBlockResponseMultiError(errors)
	}

	return nil
}

// GetBlockResponseMultiError is an error wrapping multiple validation errors
// returned by GetBlockResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBlockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlockResponseMultiError) AllErrors() []error { return m }

// GetBlockResponseValidationError is the validation error returned by
// GetBlockResponse.Validate if the designated constraints aren't met.
type GetBlockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockResponseValidationError) ErrorName() string { return "GetBlockResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetBlockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockResponseValidationError{}

// Validate checks the field values on GetBlockChildrenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBlockChildrenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlockChildrenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlockChildrenRequestMultiError, or nil if none found.
func (m *GetBlockChildrenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlockChildrenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetBlockId()); err != nil {
		err = GetBlockChildrenRequestValidationError{
			field:  "BlockId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SpaceId != nil {

		if err := m._validateUuid(m.GetSpaceId()); err != nil {
			err = GetBlockChildrenRequestValidationError{
				field:  "SpaceId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetBlockChildrenRequestMultiError(errors)
	}

	return nil
}

func (m *GetBlockChildrenRequest) _validateUuid(uuid string) error {
	if matched := _apis_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetBlockChildrenRequestMultiError is an error wrapping multiple validation
// errors returned by GetBlockChildrenRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBlockChildrenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlockChildrenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlockChildrenRequestMultiError) AllErrors() []error { return m }

// GetBlockChildrenRequestValidationError is the validation error returned by
// GetBlockChildrenRequest.Validate if the designated constraints aren't met.
type GetBlockChildrenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockChildrenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockChildrenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockChildrenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockChildrenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockChildrenRequestValidationError) ErrorName() string {
	return "GetBlockChildrenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBlockChildrenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockChildrenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockChildrenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockChildrenRequestValidationError{}

// Validate checks the field values on GetBlockChildrenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBlockChildrenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlockChildrenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlockChildrenResponseMultiError, or nil if none found.
func (m *GetBlockChildrenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlockChildrenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBlockChildrenResponseValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBlockChildrenResponseValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBlockChildrenResponseValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBlockChildrenResponseMultiError(errors)
	}

	return nil
}

// GetBlockChildrenResponseMultiError is an error wrapping multiple validation
// errors returned by GetBlockChildrenResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBlockChildrenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlockChildrenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlockChildrenResponseMultiError) AllErrors() []error { return m }

// GetBlockChildrenResponseValidationError is the validation error returned by
// GetBlockChildrenResponse.Validate if the designated constraints aren't met.
type GetBlockChildrenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockChildrenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockChildrenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockChildrenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockChildrenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockChildrenResponseValidationError) ErrorName() string {
	return "GetBlockChildrenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBlockChildrenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockChildrenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockChildrenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockChildrenResponseValidationError{}

// Validate checks the field values on GetBlockDescendantsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBlockDescendantsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlockDescendantsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlockDescendantsRequestMultiError, or nil if none found.
func (m *GetBlockDescendantsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlockDescendantsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetBlockId()); err != nil {
		err = GetBlockDescendantsRequestValidationError{
			field:  "BlockId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SpaceId != nil {

		if err := m._validateUuid(m.GetSpaceId()); err != nil {
			err = GetBlockDescendantsRequestValidationError{
				field:  "SpaceId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetBlockDescendantsRequestMultiError(errors)
	}

	return nil
}

func (m *GetBlockDescendantsRequest) _validateUuid(uuid string) error {
	if matched := _apis_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetBlockDescendantsRequestMultiError is an error wrapping multiple
// validation errors returned by GetBlockDescendantsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetBlockDescendantsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlockDescendantsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlockDescendantsRequestMultiError) AllErrors() []error { return m }

// GetBlockDescendantsRequestValidationError is the validation error returned
// by GetBlockDescendantsRequest.Validate if the designated constraints aren't met.
type GetBlockDescendantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockDescendantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockDescendantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockDescendantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockDescendantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockDescendantsRequestValidationError) ErrorName() string {
	return "GetBlockDescendantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBlockDescendantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockDescendantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockDescendantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockDescendantsRequestValidationError{}

// Validate checks the field values on GetBlockDescendantsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBlockDescendantsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlockDescendantsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlockDescendantsResponseMultiError, or nil if none found.
func (m *GetBlockDescendantsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlockDescendantsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBlock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBlockDescendantsResponseValidationError{
					field:  "Block",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBlockDescendantsResponseValidationError{
					field:  "Block",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBlockDescendantsResponseValidationError{
				field:  "Block",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBlockDescendantsResponseMultiError(errors)
	}

	return nil
}

// GetBlockDescendantsResponseMultiError is an error wrapping multiple
// validation errors returned by GetBlockDescendantsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetBlockDescendantsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlockDescendantsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlockDescendantsResponseMultiError) AllErrors() []error { return m }

// GetBlockDescendantsResponseValidationError is the validation error returned
// by GetBlockDescendantsResponse.Validate if the designated constraints
// aren't met.
type GetBlockDescendantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockDescendantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockDescendantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockDescendantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockDescendantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockDescendantsResponseValidationError) ErrorName() string {
	return "GetBlockDescendantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBlockDescendantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockDescendantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockDescendantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockDescendantsResponseValidationError{}

// Validate checks the field values on GetBlockPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBlockPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlockPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlockPageRequestMultiError, or nil if none found.
func (m *GetBlockPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlockPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetBlockId()); err != nil {
		err = GetBlockPageRequestValidationError{
			field:  "BlockId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBlockPageRequestMultiError(errors)
	}

	return nil
}

func (m *GetBlockPageRequest) _validateUuid(uuid string) error {
	if matched := _apis_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetBlockPageRequestMultiError is an error wrapping multiple validation
// errors returned by GetBlockPageRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBlockPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlockPageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlockPageRequestMultiError) AllErrors() []error { return m }

// GetBlockPageRequestValidationError is the validation error returned by
// GetBlockPageRequest.Validate if the designated constraints aren't met.
type GetBlockPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockPageRequestValidationError) ErrorName() string {
	return "GetBlockPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBlockPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockPageRequestValidationError{}

// Validate checks the field values on GetBlockPageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBlockPageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlockPageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlockPageResponseMultiError, or nil if none found.
func (m *GetBlockPageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlockPageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBlockPageResponseValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBlockPageResponseValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBlockPageResponseValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBlockPageResponseMultiError(errors)
	}

	return nil
}

// GetBlockPageResponseMultiError is an error wrapping multiple validation
// errors returned by GetBlockPageResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBlockPageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlockPageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlockPageResponseMultiError) AllErrors() []error { return m }

// GetBlockPageResponseValidationError is the validation error returned by
// GetBlockPageResponse.Validate if the designated constraints aren't met.
type GetBlockPageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockPageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockPageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockPageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockPageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockPageResponseValidationError) ErrorName() string {
	return "GetBlockPageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBlockPageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockPageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockPageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockPageResponseValidationError{}

// Validate checks the field values on GetUpdatesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUpdatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUpdatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUpdatesRequestMultiError, or nil if none found.
func (m *GetUpdatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUpdatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetSpaceId()); err != nil {
		err = GetUpdatesRequestValidationError{
			field:  "SpaceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetTransactionId()); err != nil {
		err = GetUpdatesRequestValidationError{
			field:  "TransactionId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUpdatesRequestMultiError(errors)
	}

	return nil
}

func (m *GetUpdatesRequest) _validateUuid(uuid string) error {
	if matched := _apis_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetUpdatesRequestMultiError is an error wrapping multiple validation errors
// returned by GetUpdatesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUpdatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUpdatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUpdatesRequestMultiError) AllErrors() []error { return m }

// GetUpdatesRequestValidationError is the validation error returned by
// GetUpdatesRequest.Validate if the designated constraints aren't met.
type GetUpdatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUpdatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUpdatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUpdatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUpdatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUpdatesRequestValidationError) ErrorName() string {
	return "GetUpdatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUpdatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUpdatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUpdatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUpdatesRequestValidationError{}

// Validate checks the field values on ChildIds with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChildIds) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChildIds with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChildIdsMultiError, or nil
// if none found.
func (m *ChildIds) ValidateAll() error {
	return m.validate(true)
}

func (m *ChildIds) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChildIdsMultiError(errors)
	}

	return nil
}

// ChildIdsMultiError is an error wrapping multiple validation errors returned
// by ChildIds.ValidateAll() if the designated constraints aren't met.
type ChildIdsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChildIdsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChildIdsMultiError) AllErrors() []error { return m }

// ChildIdsValidationError is the validation error returned by
// ChildIds.Validate if the designated constraints aren't met.
type ChildIdsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildIdsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChildIdsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChildIdsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildIdsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildIdsValidationError) ErrorName() string { return "ChildIdsValidationError" }

// Error satisfies the builtin error interface
func (e ChildIdsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChildIds.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildIdsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildIdsValidationError{}

// Validate checks the field values on GetUpdatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUpdatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUpdatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUpdatesResponseMultiError, or nil if none found.
func (m *GetUpdatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUpdatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetUpdates()))
		i := 0
		for key := range m.GetUpdates() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetUpdates()[key]
			_ = val

			// no validation rules for Updates[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetUpdatesResponseValidationError{
							field:  fmt.Sprintf("Updates[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetUpdatesResponseValidationError{
							field:  fmt.Sprintf("Updates[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetUpdatesResponseValidationError{
						field:  fmt.Sprintf("Updates[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUpdatesResponseValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUpdatesResponseValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUpdatesResponseValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUpdatesResponseMultiError(errors)
	}

	return nil
}

// GetUpdatesResponseMultiError is an error wrapping multiple validation errors
// returned by GetUpdatesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUpdatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUpdatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUpdatesResponseMultiError) AllErrors() []error { return m }

// GetUpdatesResponseValidationError is the validation error returned by
// GetUpdatesResponse.Validate if the designated constraints aren't met.
type GetUpdatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUpdatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUpdatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUpdatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUpdatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUpdatesResponseValidationError) ErrorName() string {
	return "GetUpdatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUpdatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUpdatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUpdatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUpdatesResponseValidationError{}

// Validate checks the field values on GetBackLinksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBackLinksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBackLinksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBackLinksRequestMultiError, or nil if none found.
func (m *GetBackLinksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBackLinksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetSpaceId()); err != nil {
		err = GetBackLinksRequestValidationError{
			field:  "SpaceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetBlockId()); err != nil {
		err = GetBackLinksRequestValidationError{
			field:  "BlockId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBackLinksRequestMultiError(errors)
	}

	return nil
}

func (m *GetBackLinksRequest) _validateUuid(uuid string) error {
	if matched := _apis_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetBackLinksRequestMultiError is an error wrapping multiple validation
// errors returned by GetBackLinksRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBackLinksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBackLinksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBackLinksRequestMultiError) AllErrors() []error { return m }

// GetBackLinksRequestValidationError is the validation error returned by
// GetBackLinksRequest.Validate if the designated constraints aren't met.
type GetBackLinksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBackLinksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBackLinksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBackLinksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBackLinksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBackLinksRequestValidationError) ErrorName() string {
	return "GetBackLinksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBackLinksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBackLinksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBackLinksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBackLinksRequestValidationError{}

// Validate checks the field values on GetBackLinksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBackLinksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBackLinksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBackLinksResponseMultiError, or nil if none found.
func (m *GetBackLinksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBackLinksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBackLinksResponseValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBackLinksResponseValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBackLinksResponseValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBackLinksResponseMultiError(errors)
	}

	return nil
}

// GetBackLinksResponseMultiError is an error wrapping multiple validation
// errors returned by GetBackLinksResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBackLinksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBackLinksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBackLinksResponseMultiError) AllErrors() []error { return m }

// GetBackLinksResponseValidationError is the validation error returned by
// GetBackLinksResponse.Validate if the designated constraints aren't met.
type GetBackLinksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBackLinksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBackLinksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBackLinksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBackLinksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBackLinksResponseValidationError) ErrorName() string {
	return "GetBackLinksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBackLinksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBackLinksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBackLinksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBackLinksResponseValidationError{}
